<!-- This file controls the view for the non-editable version of the plays.
It can be found at app/views/plays/show.html.erb -->

<!-- This file uses the app/assets/stylesheets/plays.scss file for controlling its css. -->

<!-- NOTE: The code in this file and the show.html.erb for the edits of the plays is almost 
identical except for the parts pertaining to making edits. This means that changes to non-editing 
parts of the view need to be made in both show files.
However, they both utilize the same .scss file. -->

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">

<!-- The background color for this view had to go here. It would not work within the .scss file. -->
<html><body style = "background-color: #faebd7">
    <p id="notice"></p>


    <!--
        The synopsis will show up here as a popup.
        TODO: Currently the synopsis button does not work.
    -->
    <div id="synopsis-modal" class="shown-modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <div class="hidden-synopsis" id="hidden-synopsis"></div>
        </div>
    </div>


    <!--
        The analytics will show up here as a popup.
    -->
    <div id="analytics-modal" class="shown-modal">
        <div class="modal-content">
            <span class="close2">&times;</span>
            <div class="hidden-analytics" id="hidden-analytics"></div>

            <!-- Create a button for each act and scene in the play. -->
            <% lastact = 0 %>
            <% actScenes = Scene.joins(:act).select(" acts.number as act_number, scenes.number as scene_number, scenes.id as scene_id, acts.id as act_id").where(acts: {:play_id => @play.id}) %>
            <div class="analytics-actRow">
                    <div class="analytics-column analytics-left"></div>

                    <div class="analytics-column analytics-middle">
                        Original Word Count
                    </div>
                    <div class="analytics-column analytics-right"></div>
            </div>
            <% actScenes.each do |actScene| %>
              <% if lastact != actScene.act_number %>
                <% lastact = actScene.act_number %>
                <% actWords = Word.joins(:line => :scene).where(scenes: {:act_id => actScene.act_id}).count %>
                <div class="analytics-actRow">
                  <div class="analytics-column analytics-left">
                      <%= "ACT " + actScene.act_number.to_s %>
                  </div>
                  <div class="analytics-column analytics-middle">
                      <%= actWords.to_s %>
                  </div>
                  <br>
                </div>
              <% end %>
              <% sceneWords = Word.joins(:line).where(lines: {:scene_id => actScene.scene_id}).count %>
              <div class="analytics-sceneRow">
                <div class="analytics-column analytics-left">
                        <%= "SCENE " + actScene.scene_number.to_s %>
                    </div>
                    <div class="analytics-column analytics-middle">
                        <%= sceneWords.to_s %>
                    </div>
                    <br>
              </div>

            <% end %>

            <% analyticstext = "" %>
            <script>
                document.getElementById('hidden-analytics').innerHTML = '<%= escape_javascript analyticstext %>';
            </script>
        </div>
    </div>

    <!-- 
    This is the code for the navigation bar on the left side of the view. 
    -->
    <div class="script-side-bar">
        <div class="play-navigation">

            <!-- This button shows the play's synopsis. -->
            <button class="nav-synopsis" id="synopsis-button">SYNOPSIS</button>

            <!-- This button shows the play's analytics. -->
            <button class="nav-analytics" id="analytics-button">ANALYTICS</button>

            <!-- Create a button for each act and scene in the play.
            The ability to navigate through the play is handled via href tags. -->
            <% lastact = 0 %>
            <% actScenes = Scene.joins(:act).select(" acts.number as act_number, scenes.number as scene_number, scenes.id as scene_id, acts.id as act_id").where(acts: {:play_id => @play.id}) %>
            <% actScenes.each do |actScene| %>
              <% if lastact != actScene.act_number %>
                <% lastact = actScene.act_number %>
                <% actLink = "/plays/" + @play.id.to_s + "/#act" + actScene.act_number.to_s %>
                <a style = color:black href=<%=actLink%> >
                <button class="nav-act" id="current-act"><%= "ACT " + actScene.act_number.to_s %></button>
                </a>
                <script>
                    document.getElementById('current-act').id = '<%= escape_javascript "na" + actScene.scene_number.to_s %>';
                </script>
              <% end %>
              <% sceneLink = "/plays/" + @play.id.to_s + "/#act" + actScene.act_number.to_s + "scene" + actScene.scene_number.to_s %>
              <a style = color:black href=<%=sceneLink%> >
              <button class="nav-scene" id="current-scene"><%= "SCENE " + actScene.scene_number.to_s %></button>
              </a>
              <script>
                  document.getElementById('current-scene').id = '<%= escape_javascript "ns" + actScene.scene_number.to_s %>';
              </script>

            <% end %>

        </div>
    </div>

    <!-- 
    This is the code for the bar on the right side of the screen that explains
    how to create an edit and holds the button for creating an edit. 
    -->
    <div class="script-editor">
        <div class="edit-explanation">
            <span class="edit-explanation-text">
                You will need to make an edit if you want to
            </span>

            <span class="edit-explanation-text">
                make changes to the play. You need to be 
            </span>

            <span class="edit-explanation-text">
                logged in first.
            </span>
        </div>
        <% if current_user %>
          <% link = "/makenewedit/" + @play.id.to_s %>
        <% else %>
          <% link = "/users/sign_in" %>
        <% end %>
        <a style = color:black href=<%=link%>>
          <button class="save-button"> EDIT</button>
        </a/>
    </div>

    <!--
    This is the code for the actual script part of the view.
    -->
    <div class="script-main">
        <!-- We loop through each act in order to create the script. -->
        <% @acts.each do |act| %>
            <% actId = "act" + (act.number).to_s%>
            <a id=<%= actId %> >
            <div class="actDiv" id="Diva"><button class="acthead" id="current-act" data-display="true"> Act <%= act.number %> </button>
            </a>
            <br> <br>
             <% rscenes = Scene.joins(:act).where(:act_id => act.id).order(:number) %>
             <!-- We then loop through each scene in each act. -->
             <% rscenes.each do |scene| %>
               <% sceneId = "act" + (act.number).to_s + "scene" + (scene.number).to_s%>
               <a id=<%= sceneId %> >
               <div class="sceneDiv" id="Divs"><span class="scenehead" id="current-scene" data-display="true"> Scene <%= scene.number %> </span>
                </a>
                <br>
                <!-- We heavily utilize the join function and our database to display the words quickly and efficiently. -->
                <!--credit to kombajn zbozowy for their "not in" implementation:
                https://stackoverflow.com/questions/25519513/rails-activerecord-query-where-relationship-does-not-exist-based-on-third-attrib-->
                <% wordLines = Line.joins(:scene).joins(:words).where(:scene_id => scene.id).select("words.id as wordid, lines.number as lineNum, *").order(:number) %>
                <% last_number = 0 %>
                <% currentSpeaker = "" %>
                <% wordLines.each do |wordline| %>
                <!-- Lines that are stage directions are tagged as such and handled differently from regular lines. -->
                <% if wordline.isStage %>
                  <br/>
                  <span class="stage" data-cut="false" data-display="true" id = <%= wordline.wordid.to_s %>>
                      <%= wordline.text %>
                  </span>
                  <br>
                <% else %>
                    <% if wordline.lineNum != last_number %>
                      <% last_number = wordline.lineNum %>
                      <!-- This is how we handle displaying the name of a character 
                      whenever a new character starts speaking. -->
                      <% if (currentSpeaker != wordline.speaker) %>
                        <% currentSpeaker = wordline.speaker %>
                        <br><br> <p class="speaker"> <%= wordline.speaker %> </p>
                      <% end %>
                      <br>
                      <p class="lineNum"><%= wordline.lineNum %></p>
                    <% end %>
                    <button class ="word" data-cut="false" data-display="true" id = <%= wordline.wordid.to_s %>>
                    <%= wordline.text %>
                    </button>
                  <% end %>
                <% end %>
            <% end %>
            </div>
        <% end %>
    </div>

    <script>
      /**
         * This controls the analytics button in the navigation bar.
         */
        var modal2 = document.getElementById("analytics-modal");
        var btn2 = document.getElementById("analytics-button");
        var span2 = document.getElementsByClassName("close2")[0];
        btn2.onclick = function() {
            modal2.style.display = "block";
        }
        span2.onclick = function() {
            modal2.style.display = "none";
        }
    </script>

</body></html>
